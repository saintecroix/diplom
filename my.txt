Суперсет
Мое приложение:
    1. Разделить бэк на микросервисы
    2. Придумать визуальное отображение
    3. Взаимосвязь суперсета с бэком
    4. Создать агрегатор для входных данных
БД:
    1. Схема бд
    2. Реализация
    3. Связь с бэком и суперсетом


Агрегатор для входных данных:
1. Docker-инфраструктура
    1.1. Создать Dockerfile для микросервисов
    Использовать многоэтапную сборку:

        Этап 1: Компиляция Go-кода в статический бинарник (CGO_ENABLED=0).

        Этап 2: Запуск из образа scratch с копированием бинарника и SSL-сертификатов.

    Пример для микросервиса агрегации данных:

    dockerfile
        # Этап 1: Сборка
        FROM golang:1.20-alpine as builder
        WORKDIR /app
        COPY . .
        RUN CGO_ENABLED=0 GOOS=linux go build -o /app/service .

        # Этап 2: Запуск
        FROM scratch
        COPY --from=builder /app/service /service
        COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
        CMD ["/service"]
    1.2. Написать docker-compose.yml
    Запуск всех сервисов:

    PostgreSQL.

    Микросервисы (агрегация данных, API Gateway).

    Интеграционные тесты.

    Настройка сетей, volumes, health-check.

    Пример:

        yaml
        services:
          postgres:
            image: postgres:14
            environment: ...
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U keril"]
              interval: 5s

          data-aggregator:
            image: data-aggregator:scratch
            build: ./data-aggregator
            depends_on:
              postgres:
                condition: service_healthy

          api-gateway:
            image: api-gateway:scratch
            build: ./api-gateway
            ports:
              - "8080:8080"

          tests:
            image: tests:latest
            build: ./tests
            depends_on:
              - data-aggregator
              - api-gateway
    1.3. Миграции БД
    Автоматическое выполнение create.sql при старте PostgreSQL через volumes.

2. Бизнес-логика

    2.1. Чтение Excel-файлов.

    2.2. Маппинг колонок через таблицу naming.

    2.3. Преобразование данных.

    2.4. Вставка данных в БД.

3. Основная часть кода
    3.1. Структуры данных
    Определить Go-структуры для таблиц БД.

    3.2. Работа с БД
    Реализовать репозитории для вставки/чтения данных.

    3.3. gRPC API
    Создать .proto-файлы.

    Сгенерировать код.

    Реализовать сервер.

    3.4. REST API + Swagger
    Настроить grpc-gateway.

    Добавить Swagger-аннотации.

4. API Gateway
    Настроить маршрутизацию REST → gRPC.

    Добавить аутентификацию (JWT).

5. Интеграционное тестирование
    5.1. Тестовый контейнер
    Создать Dockerfile для тестового сервиса.

    Пример:

    dockerfile
        FROM golang:1.20-alpine
        WORKDIR /app
        COPY . .
        RUN go install github.com/stretchr/testify/assert@latest
        CMD ["go", "test", "-v", "./..."]
    5.2. Сценарии тестирования
    Проверка корректности загрузки Excel → БД.

    Тестирование gRPC и REST API.

    Валидация данных через запросы к БД.

5.3. Автоматизация
    Запуск тестов через docker-compose up tests.

    Генерация отчетов (например, JUnit XML).

6. Документация и деплой
    6.1. Обновить README.md
    Инструкции по запуску:

    bash
        docker-compose up --build

    Описание работы с Swagger UI.

6.2. CI/CD Pipeline
    GitHub Actions/GitLab CI:

    Сборка Scratch-образов.

    Запуск интеграционных тестов.

    Деплой в облако (AWS ECS, Kubernetes).

Порядок выполнения
    Docker + Scratch-образы → Базовая инфраструктура.

    Бизнес-логика + Основной код → Функционал.

    API Gateway → REST/gRPC.

    Интеграционные тесты → Проверка всей системы.

    CI/CD + Деплой → Автоматизация.